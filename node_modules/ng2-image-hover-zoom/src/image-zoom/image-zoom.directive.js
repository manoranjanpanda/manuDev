var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Created by craftsvilla on 15/03/17.
 */
import { Directive, Input, ElementRef, ComponentFactoryResolver, ViewContainerRef, HostListener } from '@angular/core';
import { ImageZoomContainer } from './image-zoom-container.component';
import { ZoomLensContainer } from './zoom-lens-container.component';
var ImageZoomDirective = (function () {
    function ImageZoomDirective(_componentFactoryResolver, _viewContainerRef, _elementRef) {
        var _this = this;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._viewContainerRef = _viewContainerRef;
        this._elementRef = _elementRef;
        this._imageLoaded = false;
        this._componentsCreated = false;
        this._zoomedImageLoaded = false;
        this._moveImagePosX = true;
        this._moveImagePosY = true;
        if (this._elementRef.nativeElement.nodeName !== 'IMG') {
            console.error('ImageZoom not placed on image element', this._elementRef.nativeElement);
            return;
        }
        this.img = this._elementRef.nativeElement;
        this.img.onload = function () {
            _this._imageLoaded = true;
            if (_this._componentsCreated) {
                _this.imageChanged();
            }
        };
        var imageZoomContainerFactory = this._componentFactoryResolver.resolveComponentFactory(ImageZoomContainer);
        var imageLensContainerFactory = this._componentFactoryResolver.resolveComponentFactory(ZoomLensContainer);
        this._imageZoomContainerRef = this._viewContainerRef.createComponent(imageZoomContainerFactory);
        this._lensContainerRef = this._viewContainerRef.createComponent(imageLensContainerFactory);
        this.zoomContainer = this._imageZoomContainerRef.instance;
        this.lensContainer = this._lensContainerRef.instance;
        this._componentsCreated = true;
        if (this._imageLoaded) {
            this.imageChanged();
        }
    }
    ImageZoomDirective.prototype.onMouseOver = function (event) {
        if (typeof window !== 'undefined' && window.innerWidth > 992) {
            this._elementRef.nativeElement.style.cursor = this._zoomedImageLoaded ? 'crosshair' : 'wait';
            if (this._imageLoaded) {
                this.zoomContainer.setVisibility(true);
                this.lensContainer.setVisibility(true);
                this.setImageStyle(event);
                this.setLensContainerStyle(event);
            }
        }
    };
    ImageZoomDirective.prototype.onMouseOut = function () {
        if (typeof window !== 'undefined' && window.innerWidth > 992) {
            this.zoomContainer.setVisibility(false);
            this.lensContainer.setVisibility(false);
        }
    };
    ImageZoomDirective.prototype.onMouseMove = function () {
        if (typeof window !== 'undefined' && window.innerWidth > 992) {
            this.setLensContainerStyle(event);
            this.setImageStyle(event);
        }
    };
    ImageZoomDirective.prototype.imageChanged = function () {
        var _this = this;
        this._zoomedImageLoaded = false;
        this._zoomedImage = new Image();
        this._zoomedImage.onload = function () {
            _this._zoomedImageWidth = _this._zoomedImage.width;
            _this._zoomedImageHeight = _this._zoomedImage.height;
            _this._zoomedImageLoaded = true;
            _this.setImageZoomContainer();
        };
        this._zoomedImage.src = this.imageZoom ? this.imageZoom : this.img.src;
    };
    ImageZoomDirective.prototype.setImageZoomContainer = function () {
        var options = {};
        var left = this._elementRef.nativeElement.width + this._elementRef.nativeElement.offsetLeft + 50;
        var top = this._elementRef.nativeElement.offsetTop;
        options['left'] = left;
        options['src'] = this._zoomedImage.src;
        options['top'] = top;
        options['height'] = this._elementRef.nativeElement.offsetHeight;
        options['width'] = this._elementRef.nativeElement.offsetWidth;
        this.zoomContainer.setOptions(options);
    };
    ImageZoomDirective.prototype.setLensContainerStyle = function (event) {
        var options = {};
        var boundry = this._elementRef.nativeElement.getBoundingClientRect();
        var imagePointerX = event.offsetX;
        var imagePointerY = event.offsetY;
        var imageWidth = this._elementRef.nativeElement.offsetWidth;
        var imageHeight = this._elementRef.nativeElement.offsetHeight;
        var scaleX = imageWidth / this._zoomedImageWidth;
        var scaleY = imageHeight / this._zoomedImageHeight;
        var width = imageWidth * scaleX;
        var height = imageHeight * scaleY;
        var left = imagePointerX - (width / 2);
        var top = imagePointerY - (height / 2);
        if (boundry.left > left) {
            options['left'] = boundry.left;
            this._moveImagePosX = false;
        }
        else if (left > (boundry.width - width)) {
            options['left'] = boundry.width - width;
            this._moveImagePosX = false;
        }
        else {
            options['left'] = left;
            this._moveImagePosX = true;
        }
        if (boundry.top > top) {
            options['top'] = boundry.top;
            this._moveImagePosY = false;
        }
        else if (top > (boundry.height - height)) {
            options['top'] = boundry.height - height;
            this._moveImagePosY = false;
        }
        else {
            options['top'] = top;
            this._moveImagePosY = true;
        }
        options['height'] = height;
        options['width'] = width;
        this.lensContainer.setOptions(options);
    };
    ImageZoomDirective.prototype.setImageStyle = function (event) {
        var backgroundPos = this.getbackgroundPos(event);
        this.zoomContainer.setBackgroundPosition(backgroundPos);
    };
    ImageZoomDirective.prototype.getbackgroundPos = function (event) {
        var imagePointerX = event.offsetX;
        var imagePointerY = event.offsetY;
        var imageWidth = this._elementRef.nativeElement.offsetWidth;
        var imageHeight = this._elementRef.nativeElement.offsetHeight;
        var backgroundPos = '0px 0px';
        var scaleX = this._zoomedImageWidth / imageWidth;
        var scaleY = this._zoomedImageHeight / imageHeight;
        var posX = this._moveImagePosX ? (-((imagePointerX * scaleX) - (imageWidth / 2))) + 'px' : (this._zoomedImageWidth === imageWidth) ? '0px' : this.zoomContainer.el.style.backgroundPositionX;
        var posY = this._moveImagePosY ? (-((imagePointerY * scaleY) - (imageHeight / 2))) + 'px' : (this._zoomedImageHeight === imageHeight) ? '0px' : this.zoomContainer.el.style.backgroundPositionY;
        backgroundPos = posX + ' ' + posY + '';
        return backgroundPos;
    };
    ImageZoomDirective.prototype.ngOnChanges = function (changes) {
        this.imageChanged();
    };
    return ImageZoomDirective;
}());
__decorate([
    Input(),
    __metadata("design:type", String)
], ImageZoomDirective.prototype, "imageZoom", void 0);
__decorate([
    HostListener('mouseover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ImageZoomDirective.prototype, "onMouseOver", null);
__decorate([
    HostListener('mouseout', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ImageZoomDirective.prototype, "onMouseOut", null);
__decorate([
    HostListener('mousemove', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ImageZoomDirective.prototype, "onMouseMove", null);
ImageZoomDirective = __decorate([
    Directive({
        selector: '[imageZoom]'
    }),
    __metadata("design:paramtypes", [ComponentFactoryResolver,
        ViewContainerRef,
        ElementRef])
], ImageZoomDirective);
export { ImageZoomDirective };
